
RGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000628  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000069c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c29  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000777  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006de  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092e  00000000  00000000  000027b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000030e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	cb c1       	rjmp	.+918    	; 0x3b8 <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 30       	cpi	r26, 0x02	; 2
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	88 d1       	rcall	.+784    	; 0x362 <main>
  52:	e8 c2       	rjmp	.+1488   	; 0x624 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <send_1>:
	for(unsigned char y = 0; y < size_of_array_h; y++){
		for(unsigned char x = 0; x < size_of_array_w; x++){
			array[y][x] = 0;
		}
	}
}
  56:	8b b1       	in	r24, 0x0b	; 11
  58:	80 64       	ori	r24, 0x40	; 64
  5a:	8b b9       	out	0x0b, r24	; 11
	...
  6c:	00 00       	nop
  6e:	8b b1       	in	r24, 0x0b	; 11
  70:	8f 7b       	andi	r24, 0xBF	; 191
  72:	8b b9       	out	0x0b, r24	; 11
  74:	08 95       	ret

00000076 <send_0>:
  76:	8b b1       	in	r24, 0x0b	; 11
  78:	80 64       	ori	r24, 0x40	; 64
  7a:	8b b9       	out	0x0b, r24	; 11
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	8b b1       	in	r24, 0x0b	; 11
  84:	8f 7b       	andi	r24, 0xBF	; 191
  86:	8b b9       	out	0x0b, r24	; 11
  88:	08 95       	ret

0000008a <set_RGB_v3>:
  8a:	bf 92       	push	r11
  8c:	cf 92       	push	r12
  8e:	df 92       	push	r13
  90:	ef 92       	push	r14
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	8c 01       	movw	r16, r24
  9e:	d0 e0       	ldi	r29, 0x00	; 0
  a0:	46 c0       	rjmp	.+140    	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	b8 16       	cp	r11, r24
  a6:	91 f0       	breq	.+36     	; 0xcc <set_RGB_v3+0x42>
  a8:	b8 16       	cp	r11, r24
  aa:	20 f0       	brcs	.+8      	; 0xb4 <set_RGB_v3+0x2a>
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	b8 16       	cp	r11, r24
  b0:	39 f0       	breq	.+14     	; 0xc0 <set_RGB_v3+0x36>
  b2:	13 c0       	rjmp	.+38     	; 0xda <set_RGB_v3+0x50>
  b4:	c1 2c       	mov	r12, r1
  b6:	d1 2c       	mov	r13, r1
  b8:	76 01       	movw	r14, r12
  ba:	68 94       	set
  bc:	d7 f8       	bld	r13, 7
  be:	0b c0       	rjmp	.+22     	; 0xd6 <set_RGB_v3+0x4c>
  c0:	c1 2c       	mov	r12, r1
  c2:	d1 2c       	mov	r13, r1
  c4:	76 01       	movw	r14, r12
  c6:	68 94       	set
  c8:	c7 f8       	bld	r12, 7
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <set_RGB_v3+0x4c>
  cc:	c1 2c       	mov	r12, r1
  ce:	d1 2c       	mov	r13, r1
  d0:	76 01       	movw	r14, r12
  d2:	68 94       	set
  d4:	e7 f8       	bld	r14, 7
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	20 c0       	rjmp	.+64     	; 0x11a <__EEPROM_REGION_LENGTH__+0x1a>
  da:	c1 2c       	mov	r12, r1
  dc:	d1 2c       	mov	r13, r1
  de:	76 01       	movw	r14, r12
  e0:	fa cf       	rjmp	.-12     	; 0xd6 <set_RGB_v3+0x4c>
  e2:	ed 2f       	mov	r30, r29
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e0 0f       	add	r30, r16
  f0:	f1 1f       	adc	r31, r17
  f2:	80 81       	ld	r24, Z
  f4:	91 81       	ldd	r25, Z+1	; 0x01
  f6:	a2 81       	ldd	r26, Z+2	; 0x02
  f8:	b3 81       	ldd	r27, Z+3	; 0x03
  fa:	8c 21       	and	r24, r12
  fc:	9d 21       	and	r25, r13
  fe:	ae 21       	and	r26, r14
 100:	bf 21       	and	r27, r15
 102:	89 2b       	or	r24, r25
 104:	8a 2b       	or	r24, r26
 106:	8b 2b       	or	r24, r27
 108:	11 f4       	brne	.+4      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
 10a:	b5 df       	rcall	.-150    	; 0x76 <send_0>
 10c:	01 c0       	rjmp	.+2      	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
 10e:	a3 df       	rcall	.-186    	; 0x56 <send_1>
 110:	f6 94       	lsr	r15
 112:	e7 94       	ror	r14
 114:	d7 94       	ror	r13
 116:	c7 94       	ror	r12
 118:	cf 5f       	subi	r28, 0xFF	; 255
 11a:	c8 30       	cpi	r28, 0x08	; 8
 11c:	10 f3       	brcs	.-60     	; 0xe2 <set_RGB_v3+0x58>
 11e:	b3 94       	inc	r11
 120:	01 c0       	rjmp	.+2      	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
 122:	b1 2c       	mov	r11, r1
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	8b 15       	cp	r24, r11
 128:	08 f0       	brcs	.+2      	; 0x12c <__EEPROM_REGION_LENGTH__+0x2c>
 12a:	bb cf       	rjmp	.-138    	; 0xa2 <set_RGB_v3+0x18>
 12c:	df 5f       	subi	r29, 0xFF	; 255
 12e:	dd 23       	and	r29, r29
 130:	c4 f7       	brge	.-16     	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	46 c0       	rjmp	.+140    	; 0x1c2 <__EEPROM_REGION_LENGTH__+0xc2>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	b8 16       	cp	r11, r24
 13a:	91 f0       	breq	.+36     	; 0x160 <__EEPROM_REGION_LENGTH__+0x60>
 13c:	b8 16       	cp	r11, r24
 13e:	20 f0       	brcs	.+8      	; 0x148 <__EEPROM_REGION_LENGTH__+0x48>
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	b8 16       	cp	r11, r24
 144:	39 f0       	breq	.+14     	; 0x154 <__EEPROM_REGION_LENGTH__+0x54>
 146:	13 c0       	rjmp	.+38     	; 0x16e <__EEPROM_REGION_LENGTH__+0x6e>
 148:	c1 2c       	mov	r12, r1
 14a:	d1 2c       	mov	r13, r1
 14c:	76 01       	movw	r14, r12
 14e:	68 94       	set
 150:	d7 f8       	bld	r13, 7
 152:	0b c0       	rjmp	.+22     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
 154:	c1 2c       	mov	r12, r1
 156:	d1 2c       	mov	r13, r1
 158:	76 01       	movw	r14, r12
 15a:	68 94       	set
 15c:	c7 f8       	bld	r12, 7
 15e:	05 c0       	rjmp	.+10     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
 160:	c1 2c       	mov	r12, r1
 162:	d1 2c       	mov	r13, r1
 164:	76 01       	movw	r14, r12
 166:	68 94       	set
 168:	e7 f8       	bld	r14, 7
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <__EEPROM_REGION_LENGTH__+0xae>
 16e:	c1 2c       	mov	r12, r1
 170:	d1 2c       	mov	r13, r1
 172:	76 01       	movw	r14, r12
 174:	fa cf       	rjmp	.-12     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
 176:	ed 2f       	mov	r30, r29
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	e0 0f       	add	r30, r16
 184:	f1 1f       	adc	r31, r17
 186:	80 81       	ld	r24, Z
 188:	91 81       	ldd	r25, Z+1	; 0x01
 18a:	a2 81       	ldd	r26, Z+2	; 0x02
 18c:	b3 81       	ldd	r27, Z+3	; 0x03
 18e:	8c 21       	and	r24, r12
 190:	9d 21       	and	r25, r13
 192:	ae 21       	and	r26, r14
 194:	bf 21       	and	r27, r15
 196:	89 2b       	or	r24, r25
 198:	8a 2b       	or	r24, r26
 19a:	8b 2b       	or	r24, r27
 19c:	11 f4       	brne	.+4      	; 0x1a2 <__EEPROM_REGION_LENGTH__+0xa2>
 19e:	6b df       	rcall	.-298    	; 0x76 <send_0>
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <__EEPROM_REGION_LENGTH__+0xa4>
 1a2:	59 df       	rcall	.-334    	; 0x56 <send_1>
 1a4:	f6 94       	lsr	r15
 1a6:	e7 94       	ror	r14
 1a8:	d7 94       	ror	r13
 1aa:	c7 94       	ror	r12
 1ac:	cf 5f       	subi	r28, 0xFF	; 255
 1ae:	c8 30       	cpi	r28, 0x08	; 8
 1b0:	10 f3       	brcs	.-60     	; 0x176 <__EEPROM_REGION_LENGTH__+0x76>
 1b2:	b3 94       	inc	r11
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <__EEPROM_REGION_LENGTH__+0xb8>
 1b6:	b1 2c       	mov	r11, r1
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	8b 15       	cp	r24, r11
 1bc:	08 f0       	brcs	.+2      	; 0x1c0 <__EEPROM_REGION_LENGTH__+0xc0>
 1be:	bb cf       	rjmp	.-138    	; 0x136 <__EEPROM_REGION_LENGTH__+0x36>
 1c0:	df 5f       	subi	r29, 0xFF	; 255
 1c2:	dd 23       	and	r29, r29
 1c4:	c4 f7       	brge	.-16     	; 0x1b6 <__EEPROM_REGION_LENGTH__+0xb6>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	bf 90       	pop	r11
 1d8:	08 95       	ret

000001da <timer_init>:

void timer_init(void){
	clr_bits(TCCR0A,0b11,WGM00);	//Normal
 1da:	84 b5       	in	r24, 0x24	; 36
 1dc:	8c 7f       	andi	r24, 0xFC	; 252
 1de:	84 bd       	out	0x24, r24	; 36
	set_bits(TCCR0B, 0b101, CS00);	//1024
 1e0:	85 b5       	in	r24, 0x25	; 37
 1e2:	85 60       	ori	r24, 0x05	; 5
 1e4:	85 bd       	out	0x25, r24	; 37
	set_bit(TIMSK0, TOIE0);			//interrupt
 1e6:	ee e6       	ldi	r30, 0x6E	; 110
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	80 83       	st	Z, r24
 1f0:	08 95       	ret

000001f2 <rgb>:
	}
	return f;
}

uint32_t rgb(double ratio)//ratio between 0.0 to 1.0
{
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
	//we want to normalize ratio so that it fits in to 6 regions
	//where each region is 256 units long
	uint32_t normalized = (uint32_t)(ratio * 256 * 6);
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e8       	ldi	r20, 0x80	; 128
 1fc:	53 e4       	ldi	r21, 0x43	; 67
 1fe:	87 d1       	rcall	.+782    	; 0x50e <__mulsf3>
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	40 ec       	ldi	r20, 0xC0	; 192
 206:	50 e4       	ldi	r21, 0x40	; 64
 208:	82 d1       	rcall	.+772    	; 0x50e <__mulsf3>
 20a:	ef d0       	rcall	.+478    	; 0x3ea <__fixunssfsi>

	//find the region for this position
	uint32_t region = normalized / 256;
 20c:	07 2f       	mov	r16, r23
 20e:	18 2f       	mov	r17, r24
 210:	29 2f       	mov	r18, r25
 212:	33 27       	eor	r19, r19

	//find the distance to the start of the closest region
	uint8_t x = normalized % 256;
 214:	e6 2f       	mov	r30, r22

	uint8_t r = 0, g = 0, b = 0;
	switch (region)
 216:	02 30       	cpi	r16, 0x02	; 2
 218:	11 05       	cpc	r17, r1
 21a:	21 05       	cpc	r18, r1
 21c:	31 05       	cpc	r19, r1
 21e:	01 f1       	breq	.+64     	; 0x260 <__DATA_REGION_LENGTH__+0x60>
 220:	58 f4       	brcc	.+22     	; 0x238 <__DATA_REGION_LENGTH__+0x38>
 222:	01 15       	cp	r16, r1
 224:	11 05       	cpc	r17, r1
 226:	21 05       	cpc	r18, r1
 228:	31 05       	cpc	r19, r1
 22a:	61 f1       	breq	.+88     	; 0x284 <__DATA_REGION_LENGTH__+0x84>
 22c:	01 30       	cpi	r16, 0x01	; 1
 22e:	11 05       	cpc	r17, r1
 230:	21 05       	cpc	r18, r1
 232:	31 05       	cpc	r19, r1
 234:	81 f0       	breq	.+32     	; 0x256 <__DATA_REGION_LENGTH__+0x56>
 236:	0b c0       	rjmp	.+22     	; 0x24e <__DATA_REGION_LENGTH__+0x4e>
 238:	04 30       	cpi	r16, 0x04	; 4
 23a:	11 05       	cpc	r17, r1
 23c:	21 05       	cpc	r18, r1
 23e:	31 05       	cpc	r19, r1
 240:	c1 f0       	breq	.+48     	; 0x272 <__DATA_REGION_LENGTH__+0x72>
 242:	90 f0       	brcs	.+36     	; 0x268 <__DATA_REGION_LENGTH__+0x68>
 244:	05 30       	cpi	r16, 0x05	; 5
 246:	11 05       	cpc	r17, r1
 248:	21 05       	cpc	r18, r1
 24a:	31 05       	cpc	r19, r1
 24c:	b1 f0       	breq	.+44     	; 0x27a <__DATA_REGION_LENGTH__+0x7a>
	uint32_t region = normalized / 256;

	//find the distance to the start of the closest region
	uint8_t x = normalized % 256;

	uint8_t r = 0, g = 0, b = 0;
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	e0 e0       	ldi	r30, 0x00	; 0
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	19 c0       	rjmp	.+50     	; 0x288 <__DATA_REGION_LENGTH__+0x88>
	switch (region)
	{
		case 0: r = 0xFF; g = 0;	b = 0;    g += x; break;
		case 1: r = 0xFF; g = 0xFF;	b = 0;    r -= x; break;
 256:	46 2f       	mov	r20, r22
 258:	40 95       	com	r20
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	ef ef       	ldi	r30, 0xFF	; 255
 25e:	14 c0       	rjmp	.+40     	; 0x288 <__DATA_REGION_LENGTH__+0x88>
		case 2: r = 0;	  g = 0xFF;	b = 0;    b += x; break;
 260:	26 2f       	mov	r18, r22
 262:	ef ef       	ldi	r30, 0xFF	; 255
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	10 c0       	rjmp	.+32     	; 0x288 <__DATA_REGION_LENGTH__+0x88>
		case 3: r = 0;    g = 0xFF;	b = 0xFF; g -= x; break;
 268:	e6 2f       	mov	r30, r22
 26a:	e0 95       	com	r30
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	0b c0       	rjmp	.+22     	; 0x288 <__DATA_REGION_LENGTH__+0x88>
		case 4: r = 0;    g = 0;	b = 0xFF; r += x; break;
 272:	46 2f       	mov	r20, r22
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	e0 e0       	ldi	r30, 0x00	; 0
 278:	07 c0       	rjmp	.+14     	; 0x288 <__DATA_REGION_LENGTH__+0x88>
		case 5: r = 0xFF; g = 0;	b = 0xFF; b -= x; break;
 27a:	26 2f       	mov	r18, r22
 27c:	20 95       	com	r18
 27e:	e0 e0       	ldi	r30, 0x00	; 0
 280:	4f ef       	ldi	r20, 0xFF	; 255
 282:	02 c0       	rjmp	.+4      	; 0x288 <__DATA_REGION_LENGTH__+0x88>
	uint8_t x = normalized % 256;

	uint8_t r = 0, g = 0, b = 0;
	switch (region)
	{
		case 0: r = 0xFF; g = 0;	b = 0;    g += x; break;
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	4f ef       	ldi	r20, 0xFF	; 255
		case 2: r = 0;	  g = 0xFF;	b = 0;    b += x; break;
		case 3: r = 0;    g = 0xFF;	b = 0xFF; g -= x; break;
		case 4: r = 0;    g = 0;	b = 0xFF; r += x; break;
		case 5: r = 0xFF; g = 0;	b = 0xFF; b -= x; break;
	}
	uint32_t color = ((uint32_t)r << 16) + ((uint32_t)g << 8) + ((uint32_t)b << 0);
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	ba 01       	movw	r22, r20
 290:	55 27       	eor	r21, r21
 292:	44 27       	eor	r20, r20
 294:	8e 2f       	mov	r24, r30
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	a0 e0       	ldi	r26, 0x00	; 0
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	ba 2f       	mov	r27, r26
 29e:	a9 2f       	mov	r26, r25
 2a0:	98 2f       	mov	r25, r24
 2a2:	88 27       	eor	r24, r24
 2a4:	84 0f       	add	r24, r20
 2a6:	95 1f       	adc	r25, r21
 2a8:	a6 1f       	adc	r26, r22
 2aa:	b7 1f       	adc	r27, r23
 2ac:	bc 01       	movw	r22, r24
 2ae:	cd 01       	movw	r24, r26
 2b0:	62 0f       	add	r22, r18
 2b2:	71 1d       	adc	r23, r1
 2b4:	81 1d       	adc	r24, r1
 2b6:	91 1d       	adc	r25, r1
	return color;
}
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <func>:
	
}

uint32_t func(uint8_t x, uint8_t y, uint8_t TIME){
	uint32_t f;
	if((x + TIME) > 15){
 2be:	64 2f       	mov	r22, r20
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	68 0f       	add	r22, r24
 2c4:	71 1d       	adc	r23, r1
 2c6:	60 31       	cpi	r22, 0x10	; 16
 2c8:	71 05       	cpc	r23, r1
 2ca:	74 f0       	brlt	.+28     	; 0x2e8 <func+0x2a>
		f = rgb(((double)(x + TIME - 16))/(size_of_array_w));
 2cc:	60 51       	subi	r22, 0x10	; 16
 2ce:	71 09       	sbc	r23, r1
 2d0:	07 2e       	mov	r0, r23
 2d2:	00 0c       	add	r0, r0
 2d4:	88 0b       	sbc	r24, r24
 2d6:	99 0b       	sbc	r25, r25
 2d8:	b6 d0       	rcall	.+364    	; 0x446 <__floatsisf>
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	40 e8       	ldi	r20, 0x80	; 128
 2e0:	5d e3       	ldi	r21, 0x3D	; 61
 2e2:	15 d1       	rcall	.+554    	; 0x50e <__mulsf3>
 2e4:	86 df       	rcall	.-244    	; 0x1f2 <rgb>
 2e6:	08 95       	ret
	}
	else{
		f = rgb(((double)(x + TIME))/(size_of_array_w));
 2e8:	07 2e       	mov	r0, r23
 2ea:	00 0c       	add	r0, r0
 2ec:	88 0b       	sbc	r24, r24
 2ee:	99 0b       	sbc	r25, r25
 2f0:	aa d0       	rcall	.+340    	; 0x446 <__floatsisf>
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e8       	ldi	r20, 0x80	; 128
 2f8:	5d e3       	ldi	r21, 0x3D	; 61
 2fa:	09 d1       	rcall	.+530    	; 0x50e <__mulsf3>
 2fc:	7a df       	rcall	.-268    	; 0x1f2 <rgb>
	}
	return f;
}
 2fe:	08 95       	ret

00000300 <init_array>:
			}
		}
	}
}

void init_array(uint32_t array[size_of_array_h][size_of_array_w], uint8_t TIME){
 300:	df 92       	push	r13
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	7c 01       	movw	r14, r24
 310:	d6 2e       	mov	r13, r22
	for(unsigned char y = 0; y < size_of_array_h; y++){
 312:	00 e0       	ldi	r16, 0x00	; 0
 314:	1c c0       	rjmp	.+56     	; 0x34e <init_array+0x4e>
		for(unsigned char x = 0; x < size_of_array_w; x++){
			array[y][x] = func(x, y, TIME);
 316:	c1 2f       	mov	r28, r17
 318:	d0 e0       	ldi	r29, 0x00	; 0
 31a:	4d 2d       	mov	r20, r13
 31c:	60 2f       	mov	r22, r16
 31e:	81 2f       	mov	r24, r17
 320:	ce df       	rcall	.-100    	; 0x2be <func>
 322:	cc 0f       	add	r28, r28
 324:	dd 1f       	adc	r29, r29
 326:	cc 0f       	add	r28, r28
 328:	dd 1f       	adc	r29, r29
 32a:	97 01       	movw	r18, r14
 32c:	40 e4       	ldi	r20, 0x40	; 64
 32e:	04 9f       	mul	r16, r20
 330:	20 0d       	add	r18, r0
 332:	31 1d       	adc	r19, r1
 334:	11 24       	eor	r1, r1
 336:	c2 0f       	add	r28, r18
 338:	d3 1f       	adc	r29, r19
 33a:	68 83       	st	Y, r22
 33c:	79 83       	std	Y+1, r23	; 0x01
 33e:	8a 83       	std	Y+2, r24	; 0x02
 340:	9b 83       	std	Y+3, r25	; 0x03
	}
}

void init_array(uint32_t array[size_of_array_h][size_of_array_w], uint8_t TIME){
	for(unsigned char y = 0; y < size_of_array_h; y++){
		for(unsigned char x = 0; x < size_of_array_w; x++){
 342:	1f 5f       	subi	r17, 0xFF	; 255
 344:	01 c0       	rjmp	.+2      	; 0x348 <init_array+0x48>
 346:	10 e0       	ldi	r17, 0x00	; 0
 348:	10 31       	cpi	r17, 0x10	; 16
 34a:	28 f3       	brcs	.-54     	; 0x316 <init_array+0x16>
		}
	}
}

void init_array(uint32_t array[size_of_array_h][size_of_array_w], uint8_t TIME){
	for(unsigned char y = 0; y < size_of_array_h; y++){
 34c:	0f 5f       	subi	r16, 0xFF	; 255
 34e:	08 30       	cpi	r16, 0x08	; 8
 350:	d0 f3       	brcs	.-12     	; 0x346 <init_array+0x46>
		for(unsigned char x = 0; x < size_of_array_w; x++){
			array[y][x] = func(x, y, TIME);
		}
	}	
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	08 95       	ret

00000362 <main>:

uint8_t extra_prescaler = 0;
uint8_t code = 0;

int main(void)
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	d2 50       	subi	r29, 0x02	; 2
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
	uint8_t t = 0;
	uint32_t color[size_of_array_h][size_of_array_w];
	set_bit(DDR_RGB, RGB);
 376:	8a b1       	in	r24, 0x0a	; 10
 378:	80 64       	ori	r24, 0x40	; 64
 37a:	8a b9       	out	0x0a, r24	; 10
	asm("sei");
 37c:	78 94       	sei
	t = 5; //start point
	init_array(color, t);
 37e:	65 e0       	ldi	r22, 0x05	; 5
 380:	ce 01       	movw	r24, r28
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	bd df       	rcall	.-134    	; 0x300 <init_array>
	set_RGB_v3(color);
 386:	ce 01       	movw	r24, r28
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	7f de       	rcall	.-770    	; 0x8a <set_RGB_v3>

	timer_init();
 38c:	26 df       	rcall	.-436    	; 0x1da <timer_init>
{
	uint8_t t = 0;
	uint32_t color[size_of_array_h][size_of_array_w];
	set_bit(DDR_RGB, RGB);
	asm("sei");
	t = 5; //start point
 38e:	15 e0       	ldi	r17, 0x05	; 5
 390:	0e c0       	rjmp	.+28     	; 0x3ae <main+0x4c>
	set_RGB_v3(color);

	timer_init();
	while(1){
		while(code){
			if(t > 15){
 392:	10 31       	cpi	r17, 0x10	; 16
 394:	10 f4       	brcc	.+4      	; 0x39a <main+0x38>
				t = 0;
			}
			else{
				t++;
 396:	1f 5f       	subi	r17, 0xFF	; 255
 398:	01 c0       	rjmp	.+2      	; 0x39c <main+0x3a>

	timer_init();
	while(1){
		while(code){
			if(t > 15){
				t = 0;
 39a:	10 e0       	ldi	r17, 0x00	; 0
			}
			else{
				t++;
			}
			init_array(color, t);
 39c:	61 2f       	mov	r22, r17
 39e:	ce 01       	movw	r24, r28
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	ae df       	rcall	.-164    	; 0x300 <init_array>
			set_RGB_v3(color);
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	70 de       	rcall	.-800    	; 0x8a <set_RGB_v3>
			code = 0;
 3aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	init_array(color, t);
	set_RGB_v3(color);

	timer_init();
	while(1){
		while(code){
 3ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b2:	81 11       	cpse	r24, r1
 3b4:	ee cf       	rjmp	.-36     	; 0x392 <main+0x30>
 3b6:	fb cf       	rjmp	.-10     	; 0x3ae <main+0x4c>

000003b8 <__vector_16>:
	return color;
}

// f = F_CPU/(256*1024*extra_prescaler_value)
ISR (TIMER0_OVF_vect)
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	8f 93       	push	r24
	if(extra_prescaler == extra_prescaler_value){
 3c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <extra_prescaler>
 3c8:	88 33       	cpi	r24, 0x38	; 56
 3ca:	31 f4       	brne	.+12     	; 0x3d8 <__vector_16+0x20>
		code = 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		extra_prescaler = 0;
 3d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <extra_prescaler>
		return;
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <__vector_16+0x26>
	}
	else{
		extra_prescaler++;
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <extra_prescaler>
		return;
	}
 3de:	8f 91       	pop	r24
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__fixunssfsi>:
 3ea:	70 d0       	rcall	.+224    	; 0x4cc <__fp_splitA>
 3ec:	88 f0       	brcs	.+34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3ee:	9f 57       	subi	r25, 0x7F	; 127
 3f0:	90 f0       	brcs	.+36     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f2:	b9 2f       	mov	r27, r25
 3f4:	99 27       	eor	r25, r25
 3f6:	b7 51       	subi	r27, 0x17	; 23
 3f8:	a0 f0       	brcs	.+40     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3fa:	d1 f0       	breq	.+52     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	1a f0       	brmi	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	ba 95       	dec	r27
 408:	c9 f7       	brne	.-14     	; 0x3fc <__fixunssfsi+0x12>
 40a:	12 c0       	rjmp	.+36     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 40c:	b1 30       	cpi	r27, 0x01	; 1
 40e:	81 f0       	breq	.+32     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 410:	77 d0       	rcall	.+238    	; 0x500 <__fp_zero>
 412:	b1 e0       	ldi	r27, 0x01	; 1
 414:	08 95       	ret
 416:	74 c0       	rjmp	.+232    	; 0x500 <__fp_zero>
 418:	67 2f       	mov	r22, r23
 41a:	78 2f       	mov	r23, r24
 41c:	88 27       	eor	r24, r24
 41e:	b8 5f       	subi	r27, 0xF8	; 248
 420:	39 f0       	breq	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 422:	b9 3f       	cpi	r27, 0xF9	; 249
 424:	cc f3       	brlt	.-14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 426:	86 95       	lsr	r24
 428:	77 95       	ror	r23
 42a:	67 95       	ror	r22
 42c:	b3 95       	inc	r27
 42e:	d9 f7       	brne	.-10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 430:	3e f4       	brtc	.+14     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 432:	90 95       	com	r25
 434:	80 95       	com	r24
 436:	70 95       	com	r23
 438:	61 95       	neg	r22
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	8f 4f       	sbci	r24, 0xFF	; 255
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	08 95       	ret

00000442 <__floatunsisf>:
 442:	e8 94       	clt
 444:	09 c0       	rjmp	.+18     	; 0x458 <__floatsisf+0x12>

00000446 <__floatsisf>:
 446:	97 fb       	bst	r25, 7
 448:	3e f4       	brtc	.+14     	; 0x458 <__floatsisf+0x12>
 44a:	90 95       	com	r25
 44c:	80 95       	com	r24
 44e:	70 95       	com	r23
 450:	61 95       	neg	r22
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	8f 4f       	sbci	r24, 0xFF	; 255
 456:	9f 4f       	sbci	r25, 0xFF	; 255
 458:	99 23       	and	r25, r25
 45a:	a9 f0       	breq	.+42     	; 0x486 <__floatsisf+0x40>
 45c:	f9 2f       	mov	r31, r25
 45e:	96 e9       	ldi	r25, 0x96	; 150
 460:	bb 27       	eor	r27, r27
 462:	93 95       	inc	r25
 464:	f6 95       	lsr	r31
 466:	87 95       	ror	r24
 468:	77 95       	ror	r23
 46a:	67 95       	ror	r22
 46c:	b7 95       	ror	r27
 46e:	f1 11       	cpse	r31, r1
 470:	f8 cf       	rjmp	.-16     	; 0x462 <__floatsisf+0x1c>
 472:	fa f4       	brpl	.+62     	; 0x4b2 <__floatsisf+0x6c>
 474:	bb 0f       	add	r27, r27
 476:	11 f4       	brne	.+4      	; 0x47c <__floatsisf+0x36>
 478:	60 ff       	sbrs	r22, 0
 47a:	1b c0       	rjmp	.+54     	; 0x4b2 <__floatsisf+0x6c>
 47c:	6f 5f       	subi	r22, 0xFF	; 255
 47e:	7f 4f       	sbci	r23, 0xFF	; 255
 480:	8f 4f       	sbci	r24, 0xFF	; 255
 482:	9f 4f       	sbci	r25, 0xFF	; 255
 484:	16 c0       	rjmp	.+44     	; 0x4b2 <__floatsisf+0x6c>
 486:	88 23       	and	r24, r24
 488:	11 f0       	breq	.+4      	; 0x48e <__floatsisf+0x48>
 48a:	96 e9       	ldi	r25, 0x96	; 150
 48c:	11 c0       	rjmp	.+34     	; 0x4b0 <__floatsisf+0x6a>
 48e:	77 23       	and	r23, r23
 490:	21 f0       	breq	.+8      	; 0x49a <__floatsisf+0x54>
 492:	9e e8       	ldi	r25, 0x8E	; 142
 494:	87 2f       	mov	r24, r23
 496:	76 2f       	mov	r23, r22
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <__floatsisf+0x5e>
 49a:	66 23       	and	r22, r22
 49c:	71 f0       	breq	.+28     	; 0x4ba <__floatsisf+0x74>
 49e:	96 e8       	ldi	r25, 0x86	; 134
 4a0:	86 2f       	mov	r24, r22
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	2a f0       	brmi	.+10     	; 0x4b2 <__floatsisf+0x6c>
 4a8:	9a 95       	dec	r25
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	88 1f       	adc	r24, r24
 4b0:	da f7       	brpl	.-10     	; 0x4a8 <__floatsisf+0x62>
 4b2:	88 0f       	add	r24, r24
 4b4:	96 95       	lsr	r25
 4b6:	87 95       	ror	r24
 4b8:	97 f9       	bld	r25, 7
 4ba:	08 95       	ret

000004bc <__fp_split3>:
 4bc:	57 fd       	sbrc	r21, 7
 4be:	90 58       	subi	r25, 0x80	; 128
 4c0:	44 0f       	add	r20, r20
 4c2:	55 1f       	adc	r21, r21
 4c4:	59 f0       	breq	.+22     	; 0x4dc <__fp_splitA+0x10>
 4c6:	5f 3f       	cpi	r21, 0xFF	; 255
 4c8:	71 f0       	breq	.+28     	; 0x4e6 <__fp_splitA+0x1a>
 4ca:	47 95       	ror	r20

000004cc <__fp_splitA>:
 4cc:	88 0f       	add	r24, r24
 4ce:	97 fb       	bst	r25, 7
 4d0:	99 1f       	adc	r25, r25
 4d2:	61 f0       	breq	.+24     	; 0x4ec <__fp_splitA+0x20>
 4d4:	9f 3f       	cpi	r25, 0xFF	; 255
 4d6:	79 f0       	breq	.+30     	; 0x4f6 <__fp_splitA+0x2a>
 4d8:	87 95       	ror	r24
 4da:	08 95       	ret
 4dc:	12 16       	cp	r1, r18
 4de:	13 06       	cpc	r1, r19
 4e0:	14 06       	cpc	r1, r20
 4e2:	55 1f       	adc	r21, r21
 4e4:	f2 cf       	rjmp	.-28     	; 0x4ca <__fp_split3+0xe>
 4e6:	46 95       	lsr	r20
 4e8:	f1 df       	rcall	.-30     	; 0x4cc <__fp_splitA>
 4ea:	08 c0       	rjmp	.+16     	; 0x4fc <__fp_splitA+0x30>
 4ec:	16 16       	cp	r1, r22
 4ee:	17 06       	cpc	r1, r23
 4f0:	18 06       	cpc	r1, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	f1 cf       	rjmp	.-30     	; 0x4d8 <__fp_splitA+0xc>
 4f6:	86 95       	lsr	r24
 4f8:	71 05       	cpc	r23, r1
 4fa:	61 05       	cpc	r22, r1
 4fc:	08 94       	sec
 4fe:	08 95       	ret

00000500 <__fp_zero>:
 500:	e8 94       	clt

00000502 <__fp_szero>:
 502:	bb 27       	eor	r27, r27
 504:	66 27       	eor	r22, r22
 506:	77 27       	eor	r23, r23
 508:	cb 01       	movw	r24, r22
 50a:	97 f9       	bld	r25, 7
 50c:	08 95       	ret

0000050e <__mulsf3>:
 50e:	0b d0       	rcall	.+22     	; 0x526 <__mulsf3x>
 510:	78 c0       	rjmp	.+240    	; 0x602 <__fp_round>
 512:	69 d0       	rcall	.+210    	; 0x5e6 <__fp_pscA>
 514:	28 f0       	brcs	.+10     	; 0x520 <__mulsf3+0x12>
 516:	6e d0       	rcall	.+220    	; 0x5f4 <__fp_pscB>
 518:	18 f0       	brcs	.+6      	; 0x520 <__mulsf3+0x12>
 51a:	95 23       	and	r25, r21
 51c:	09 f0       	breq	.+2      	; 0x520 <__mulsf3+0x12>
 51e:	5a c0       	rjmp	.+180    	; 0x5d4 <__fp_inf>
 520:	5f c0       	rjmp	.+190    	; 0x5e0 <__fp_nan>
 522:	11 24       	eor	r1, r1
 524:	ee cf       	rjmp	.-36     	; 0x502 <__fp_szero>

00000526 <__mulsf3x>:
 526:	ca df       	rcall	.-108    	; 0x4bc <__fp_split3>
 528:	a0 f3       	brcs	.-24     	; 0x512 <__mulsf3+0x4>

0000052a <__mulsf3_pse>:
 52a:	95 9f       	mul	r25, r21
 52c:	d1 f3       	breq	.-12     	; 0x522 <__mulsf3+0x14>
 52e:	95 0f       	add	r25, r21
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	55 1f       	adc	r21, r21
 534:	62 9f       	mul	r22, r18
 536:	f0 01       	movw	r30, r0
 538:	72 9f       	mul	r23, r18
 53a:	bb 27       	eor	r27, r27
 53c:	f0 0d       	add	r31, r0
 53e:	b1 1d       	adc	r27, r1
 540:	63 9f       	mul	r22, r19
 542:	aa 27       	eor	r26, r26
 544:	f0 0d       	add	r31, r0
 546:	b1 1d       	adc	r27, r1
 548:	aa 1f       	adc	r26, r26
 54a:	64 9f       	mul	r22, r20
 54c:	66 27       	eor	r22, r22
 54e:	b0 0d       	add	r27, r0
 550:	a1 1d       	adc	r26, r1
 552:	66 1f       	adc	r22, r22
 554:	82 9f       	mul	r24, r18
 556:	22 27       	eor	r18, r18
 558:	b0 0d       	add	r27, r0
 55a:	a1 1d       	adc	r26, r1
 55c:	62 1f       	adc	r22, r18
 55e:	73 9f       	mul	r23, r19
 560:	b0 0d       	add	r27, r0
 562:	a1 1d       	adc	r26, r1
 564:	62 1f       	adc	r22, r18
 566:	83 9f       	mul	r24, r19
 568:	a0 0d       	add	r26, r0
 56a:	61 1d       	adc	r22, r1
 56c:	22 1f       	adc	r18, r18
 56e:	74 9f       	mul	r23, r20
 570:	33 27       	eor	r19, r19
 572:	a0 0d       	add	r26, r0
 574:	61 1d       	adc	r22, r1
 576:	23 1f       	adc	r18, r19
 578:	84 9f       	mul	r24, r20
 57a:	60 0d       	add	r22, r0
 57c:	21 1d       	adc	r18, r1
 57e:	82 2f       	mov	r24, r18
 580:	76 2f       	mov	r23, r22
 582:	6a 2f       	mov	r22, r26
 584:	11 24       	eor	r1, r1
 586:	9f 57       	subi	r25, 0x7F	; 127
 588:	50 40       	sbci	r21, 0x00	; 0
 58a:	8a f0       	brmi	.+34     	; 0x5ae <__mulsf3_pse+0x84>
 58c:	e1 f0       	breq	.+56     	; 0x5c6 <__mulsf3_pse+0x9c>
 58e:	88 23       	and	r24, r24
 590:	4a f0       	brmi	.+18     	; 0x5a4 <__mulsf3_pse+0x7a>
 592:	ee 0f       	add	r30, r30
 594:	ff 1f       	adc	r31, r31
 596:	bb 1f       	adc	r27, r27
 598:	66 1f       	adc	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	88 1f       	adc	r24, r24
 59e:	91 50       	subi	r25, 0x01	; 1
 5a0:	50 40       	sbci	r21, 0x00	; 0
 5a2:	a9 f7       	brne	.-22     	; 0x58e <__mulsf3_pse+0x64>
 5a4:	9e 3f       	cpi	r25, 0xFE	; 254
 5a6:	51 05       	cpc	r21, r1
 5a8:	70 f0       	brcs	.+28     	; 0x5c6 <__mulsf3_pse+0x9c>
 5aa:	14 c0       	rjmp	.+40     	; 0x5d4 <__fp_inf>
 5ac:	aa cf       	rjmp	.-172    	; 0x502 <__fp_szero>
 5ae:	5f 3f       	cpi	r21, 0xFF	; 255
 5b0:	ec f3       	brlt	.-6      	; 0x5ac <__mulsf3_pse+0x82>
 5b2:	98 3e       	cpi	r25, 0xE8	; 232
 5b4:	dc f3       	brlt	.-10     	; 0x5ac <__mulsf3_pse+0x82>
 5b6:	86 95       	lsr	r24
 5b8:	77 95       	ror	r23
 5ba:	67 95       	ror	r22
 5bc:	b7 95       	ror	r27
 5be:	f7 95       	ror	r31
 5c0:	e7 95       	ror	r30
 5c2:	9f 5f       	subi	r25, 0xFF	; 255
 5c4:	c1 f7       	brne	.-16     	; 0x5b6 <__mulsf3_pse+0x8c>
 5c6:	fe 2b       	or	r31, r30
 5c8:	88 0f       	add	r24, r24
 5ca:	91 1d       	adc	r25, r1
 5cc:	96 95       	lsr	r25
 5ce:	87 95       	ror	r24
 5d0:	97 f9       	bld	r25, 7
 5d2:	08 95       	ret

000005d4 <__fp_inf>:
 5d4:	97 f9       	bld	r25, 7
 5d6:	9f 67       	ori	r25, 0x7F	; 127
 5d8:	80 e8       	ldi	r24, 0x80	; 128
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	08 95       	ret

000005e0 <__fp_nan>:
 5e0:	9f ef       	ldi	r25, 0xFF	; 255
 5e2:	80 ec       	ldi	r24, 0xC0	; 192
 5e4:	08 95       	ret

000005e6 <__fp_pscA>:
 5e6:	00 24       	eor	r0, r0
 5e8:	0a 94       	dec	r0
 5ea:	16 16       	cp	r1, r22
 5ec:	17 06       	cpc	r1, r23
 5ee:	18 06       	cpc	r1, r24
 5f0:	09 06       	cpc	r0, r25
 5f2:	08 95       	ret

000005f4 <__fp_pscB>:
 5f4:	00 24       	eor	r0, r0
 5f6:	0a 94       	dec	r0
 5f8:	12 16       	cp	r1, r18
 5fa:	13 06       	cpc	r1, r19
 5fc:	14 06       	cpc	r1, r20
 5fe:	05 06       	cpc	r0, r21
 600:	08 95       	ret

00000602 <__fp_round>:
 602:	09 2e       	mov	r0, r25
 604:	03 94       	inc	r0
 606:	00 0c       	add	r0, r0
 608:	11 f4       	brne	.+4      	; 0x60e <__fp_round+0xc>
 60a:	88 23       	and	r24, r24
 60c:	52 f0       	brmi	.+20     	; 0x622 <__fp_round+0x20>
 60e:	bb 0f       	add	r27, r27
 610:	40 f4       	brcc	.+16     	; 0x622 <__fp_round+0x20>
 612:	bf 2b       	or	r27, r31
 614:	11 f4       	brne	.+4      	; 0x61a <__fp_round+0x18>
 616:	60 ff       	sbrs	r22, 0
 618:	04 c0       	rjmp	.+8      	; 0x622 <__fp_round+0x20>
 61a:	6f 5f       	subi	r22, 0xFF	; 255
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	8f 4f       	sbci	r24, 0xFF	; 255
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	08 95       	ret

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
